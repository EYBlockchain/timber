{
  "contractName": "MerkleTreeControllerSHA",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "treeHeight",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "leafCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "insertLeaf",
      "outputs": [
        {
          "name": "root",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treeWidth",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "latestRoot",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "insertLeaves",
      "outputs": [
        {
          "name": "root",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValue",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "NewLeaf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "minLeafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValues",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "NewLeaves",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "_insertLeaf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "_insertLeaves",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"treeHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"_insertLeaves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leafCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"insertLeaf\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"_insertLeaf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treeWidth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"insertLeaves\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewLeaf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minLeafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValues\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewLeaves\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"}},\"_insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"}},\"insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"},\"return\":\"bytes32 - the root of the merkle tree, after the insert.\"},\"insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"},\"return\":\"bytes32[] - the root of the merkle tree, after all the inserts.\"}}},\"userdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"notice\":\"Append a leaf to the tree\"},\"_insertLeaves(bytes32[])\":{\"notice\":\"Append leaves to the tree\"},\"constructor\":\"Constructor for the MerkleTreeController contract.\",\"insertLeaf(bytes32)\":{\"notice\":\"Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier.\"},\"insertLeaves(bytes32[])\":{\"notice\":\"Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/miranda.Wooduk.ey.com/nightfallmimc/timber/deployer/contracts/MerkleTreeControllerSHA.sol\":\"MerkleTreeControllerSHA\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/miranda.Wooduk.ey.com/nightfallmimc/timber/deployer/contracts/MerkleTreeControllerSHA.sol\":{\"keccak256\":\"0xf9652e5a28b136912c3350780edc86957e5391f9440caeb6adc1215800ba5212\",\"urls\":[\"bzzr://481c5234aa5a3a90e2c8915a86f32d2f97f434e739ee0891f9f6720a41a72ce9\"]},\"/Users/miranda.Wooduk.ey.com/nightfallmimc/timber/deployer/contracts/MerkleTreeSHA.sol\":{\"keccak256\":\"0x5c6cecd6a2108653c5aa14cd2449955ed9190bddc798b98ebbd6748835e59a07\",\"urls\":[\"bzzr://65b9b60274ae675439601facf9b12ea52ffef8ea47f614cb33bb154e90ec2a38\"]}},\"version\":1}",
  "bytecode": "0x6080604052602060005560005460020a600155600060281b600360006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c021790555034801561005757600080fd5b5033602560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d7a806100a86000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806376c601b11161006657806376c601b1146101c85780638da5cb5b146101e6578063ae6dead714610230578063d7b0fef114610272578063dc52bf9f146102905761009e565b806301e3e915146100a357806303ebd1d4146100c157806330e69fc31461013a5780635c8b80ab1461015857806371b625411461019a575b600080fd5b6100ab61035c565b6040518082815260200191505060405180910390f35b610138600480360360208110156100d757600080fd5b81019080803590602001906401000000008111156100f457600080fd5b82018360208201111561010657600080fd5b8035906020019184602083028401116401000000008311171561012857600080fd5b9091929391929390505050610362565b005b610142610462565b6040518082815260200191505060405180910390f35b6101846004803603602081101561016e57600080fd5b8101908080359060200190929190505050610468565b6040518082815260200191505060405180910390f35b6101c6600480360360208110156101b057600080fd5b81019080803590602001909291905050506106d2565b005b6101d0610790565b6040518082815260200191505060405180910390f35b6101ee610796565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025c6004803603602081101561024657600080fd5b81019080803590602001909291905050506107bc565b6040518082815260200191505060405180910390f35b61027a6107d4565b6040518082815260200191505060405180910390f35b610346600480360360208110156102a657600080fd5b81019080803590602001906401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460208302840111640100000000831117156102f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506107da565b6040518082815260200191505060405180910390f35b60005481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610408576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d21602e913960400191505060405180910390fd5b6000610454838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506107da565b905080602781905550505050565b60025481565b6000600254600154116104c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610cfe6023913960400191505060405180910390fd5b60006104d3600254610c64565b9050600060018054600254010390506000602885901b90506000806104f6610cdb565b600080600090505b600054811015610653578781141561055257856004896021811061051e57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b60006002888161055e57fe5b0614156105df576004816021811061057257fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa925082600081146105ae576105b0565bfe5b50506028836000600181106105c157fe5b6020020151901b9550600260018803816105d757fe5b049650610646565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa9250826000811461061c5761061e565bfe5b505060288360006001811061062f57fe5b6020020151901b95506002878161064257fe5b0496505b80806001019150506104fe565b508160006001811061066157fe5b602002015197507f6a82ba2aa1d2c039c41e6e2b5a5a1090d09906f060d32af9c1ac0beff7af75c06002548a8a60405180848152602001838152602001828152602001935050505060405180910390a160026000815480929190600101919050555087975050505050505050919050565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d21602e913960400191505060405180910390fd5b600061078382610468565b9050806027819055505050565b60015481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60266020528060005260406000206000915090505481565b60275481565b600080825190506002546001541161083d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610cfe6023913960400191505060405180910390fd5b60025460015403811115610886576000600254600154038203905060008090505b8181101561087a5760018551038552808060010191505061085e565b50600254600154039150505b6000806000806000610896610cdb565b60008060025490505b8860025401811015610a8e5760288b6002548303815181106108bd57fe5b6020026020010151901b95506001805482010396506108db81610c64565b9750600088141561092c5785600489602181106108f457fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c0217905550610a81565b6000600190505b888111610a3e5760006002898161094657fe5b0614156109ca576004600182036021811061095d57fe5b0160009054906101000a900460281b955086945060405186815285601b8201526020856036836002600019fa935083600081146109995761099b565bfe5b50506028846000600181106109ac57fe5b6020020151901b9650600260018903816109c257fe5b049750610a31565b869550600360009054906101000a900460281b945060405186815285601b8201526020856036836002600019fa93508360008114610a0757610a09565bfe5b5050602884600060018110610a1a57fe5b6020020151901b965060028881610a2d57fe5b0497505b8080600101915050610933565b508560048960218110610a4d57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b808060010191505061089f565b5060006001880190505b6000548111610ba557600060028881610aad57fe5b061415610b315760046001820360218110610ac457fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa92508260008114610b0057610b02565bfe5b5050602883600060018110610b1357fe5b6020020151901b955060026001880381610b2957fe5b049650610b98565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa92508260008114610b6e57610b70565bfe5b5050602883600060018110610b8157fe5b6020020151901b955060028781610b9457fe5b0496505b8080600101915050610a98565b5081600060018110610bb357fe5b602002015198507f8ec50f97970775682a68d3c6f9caedf60fd82448ea40706b8b65d6c03648b9226002548b8b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c2f578082015181840152602081019050610c14565b5050505090500194505050505060405180910390a1876002600082825401925050819055508898505050505050505050919050565b6000809050600160028381610c7557fe5b061415610cd6576000600190506000600290506000600182901b90505b6000841415610cd25760008183600188010381610cab57fe5b061415610cba57829350610ccd565b809150600181901b905082806001019350505b610c92565b5050505b919050565b604051806020016040528060019060208202803883398082019150509050509056fe5468657265206973206e6f207370616365206c65667420696e2074686520747265652e596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a72305820c1a3e34fd61a0906352a2b064605ef4be264f39b7e15f381911c2c0c671ce0ab0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806376c601b11161006657806376c601b1146101c85780638da5cb5b146101e6578063ae6dead714610230578063d7b0fef114610272578063dc52bf9f146102905761009e565b806301e3e915146100a357806303ebd1d4146100c157806330e69fc31461013a5780635c8b80ab1461015857806371b625411461019a575b600080fd5b6100ab61035c565b6040518082815260200191505060405180910390f35b610138600480360360208110156100d757600080fd5b81019080803590602001906401000000008111156100f457600080fd5b82018360208201111561010657600080fd5b8035906020019184602083028401116401000000008311171561012857600080fd5b9091929391929390505050610362565b005b610142610462565b6040518082815260200191505060405180910390f35b6101846004803603602081101561016e57600080fd5b8101908080359060200190929190505050610468565b6040518082815260200191505060405180910390f35b6101c6600480360360208110156101b057600080fd5b81019080803590602001909291905050506106d2565b005b6101d0610790565b6040518082815260200191505060405180910390f35b6101ee610796565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025c6004803603602081101561024657600080fd5b81019080803590602001909291905050506107bc565b6040518082815260200191505060405180910390f35b61027a6107d4565b6040518082815260200191505060405180910390f35b610346600480360360208110156102a657600080fd5b81019080803590602001906401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460208302840111640100000000831117156102f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506107da565b6040518082815260200191505060405180910390f35b60005481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610408576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d21602e913960400191505060405180910390fd5b6000610454838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506107da565b905080602781905550505050565b60025481565b6000600254600154116104c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610cfe6023913960400191505060405180910390fd5b60006104d3600254610c64565b9050600060018054600254010390506000602885901b90506000806104f6610cdb565b600080600090505b600054811015610653578781141561055257856004896021811061051e57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b60006002888161055e57fe5b0614156105df576004816021811061057257fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa925082600081146105ae576105b0565bfe5b50506028836000600181106105c157fe5b6020020151901b9550600260018803816105d757fe5b049650610646565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa9250826000811461061c5761061e565bfe5b505060288360006001811061062f57fe5b6020020151901b95506002878161064257fe5b0496505b80806001019150506104fe565b508160006001811061066157fe5b602002015197507f6a82ba2aa1d2c039c41e6e2b5a5a1090d09906f060d32af9c1ac0beff7af75c06002548a8a60405180848152602001838152602001828152602001935050505060405180910390a160026000815480929190600101919050555087975050505050505050919050565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d21602e913960400191505060405180910390fd5b600061078382610468565b9050806027819055505050565b60015481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60266020528060005260406000206000915090505481565b60275481565b600080825190506002546001541161083d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610cfe6023913960400191505060405180910390fd5b60025460015403811115610886576000600254600154038203905060008090505b8181101561087a5760018551038552808060010191505061085e565b50600254600154039150505b6000806000806000610896610cdb565b60008060025490505b8860025401811015610a8e5760288b6002548303815181106108bd57fe5b6020026020010151901b95506001805482010396506108db81610c64565b9750600088141561092c5785600489602181106108f457fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c0217905550610a81565b6000600190505b888111610a3e5760006002898161094657fe5b0614156109ca576004600182036021811061095d57fe5b0160009054906101000a900460281b955086945060405186815285601b8201526020856036836002600019fa935083600081146109995761099b565bfe5b50506028846000600181106109ac57fe5b6020020151901b9650600260018903816109c257fe5b049750610a31565b869550600360009054906101000a900460281b945060405186815285601b8201526020856036836002600019fa93508360008114610a0757610a09565bfe5b5050602884600060018110610a1a57fe5b6020020151901b965060028881610a2d57fe5b0497505b8080600101915050610933565b508560048960218110610a4d57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b808060010191505061089f565b5060006001880190505b6000548111610ba557600060028881610aad57fe5b061415610b315760046001820360218110610ac457fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa92508260008114610b0057610b02565bfe5b5050602883600060018110610b1357fe5b6020020151901b955060026001880381610b2957fe5b049650610b98565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa92508260008114610b6e57610b70565bfe5b5050602883600060018110610b8157fe5b6020020151901b955060028781610b9457fe5b0496505b8080600101915050610a98565b5081600060018110610bb357fe5b602002015198507f8ec50f97970775682a68d3c6f9caedf60fd82448ea40706b8b65d6c03648b9226002548b8b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c2f578082015181840152602081019050610c14565b5050505090500194505050505060405180910390a1876002600082825401925050819055508898505050505050505050919050565b6000809050600160028381610c7557fe5b061415610cd6576000600190506000600290506000600182901b90505b6000841415610cd25760008183600188010381610cab57fe5b061415610cba57829350610ccd565b809150600181901b905082806001019350505b610c92565b5050505b919050565b604051806020016040528060019060208202803883398082019150509050509056fe5468657265206973206e6f207370616365206c65667420696e2074686520747265652e596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a72305820c1a3e34fd61a0906352a2b064605ef4be264f39b7e15f381911c2c0c671ce0ab0029",
  "sourceMap": "246:1673:1:-;;;2130:2:3;2105:27;;2167:10;;2162:1;:15;2138:39;;2787:56;2772:71;;;;;;;;;;;;;;;;;;;;;;1182:56:1;8:9:-1;5:2;;;30:1;27;20:12;5:2;1182:56:1;1221:10;1213:5;;:18;;;;;;;;;;;;;;;;;;246:1673;;;;;;",
  "deployedSourceMap": "246:1673:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;246:1673:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2105:27:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1691:226:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1691:226:1;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1691:226:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1691:226:1;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;1691:226:1;;;;;;;;;;;;:::i;:::-;;2202:24:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4200:4257;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4200:4257:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1358:209:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1358:209:1;;;;;;;;;;;;;;;;;:::i;:::-;;2138:39:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;303:20:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;436:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;436:40:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;621:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8763:7228:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8763:7228:3;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8763:7228:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8763:7228:3;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;8763:7228:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8763:7228:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2105:27;;;;:::o;1691:226:1:-;1024:5;;;;;;;;;;;1010:19;;:10;:19;;;1002:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1775:12;1790:24;1803:10;;1790:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1790:24:1;;;;;;:12;:24::i;:::-;1775:39;;1906:4;1893:10;:17;;;;1090:1;1691:226;;:::o;2202:24:3:-;;;;:::o;4200:4257::-;4255:12;4348:9;;4336;;:21;4328:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4408:9;4420:26;4436:9;;4420:15;:26::i;:::-;4408:38;;4456:14;4497:1;4485:9;;4473;;:21;:25;4456:42;;4508:17;4549:2;4536:9;:15;;4508:44;;4673:17;4700:18;4728:24;;:::i;:::-;4793:12;4821:10;4834:1;4821:14;;4816:3328;4845:10;;4837:5;:18;4816:3328;;;4894:4;4885:5;:13;4881:45;;;4917:9;4900:8;4909:4;4900:14;;;;;;;;;:26;;;;;;;;;;;;;;;;;;4881:45;4962:1;4957;4945:9;:13;;;;;;:18;4941:3193;;;5029:8;5038:5;5029:15;;;;;;;;;;;;;;;;;;5017:27;;5075:9;5062:22;;6329:4;6323:11;6431:9;6424:5;6417:24;6507:10;6500:4;6493:5;6489:16;6482:36;6641:4;6633:6;6627:4;6620:5;6617:1;6613;6609:6;6598:48;6587:59;;6739:7;6752:1;6747:20;;;;6732:35;;6747:20;6756:9;6732:35;;6250:535;6836:2;6823:6;6830:1;6823:9;;;;;;;;;;;:15;;6803:36;;6955:1;6950;6938:9;:13;6937:19;;;;;;6925:31;;4941:3193;;;7168:9;7156:21;;7208:4;;;;;;;;;;;7195:17;;7370:4;7364:11;7472:9;7465:5;7458:24;7548:10;7541:4;7534:5;7530:16;7523:36;7682:4;7674:6;7668:4;7661:5;7658:1;7654;7650:6;7639:48;7628:59;;7780:7;7793:1;7788:20;;;;7773:35;;7788:20;7797:9;7773:35;;7291:535;7877:2;7864:6;7871:1;7864:9;;;;;;;;;;;:15;;7844:36;;7990:1;7978:9;:13;;;;;;7966:25;;4941:3193;4857:7;;;;;;;4816:3328;;;;8161:6;8168:1;8161:9;;;;;;;;;;;8154:16;;8186:35;8194:9;;8205;8216:4;8186:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8309:9;;:11;;;;;;;;;;;;;8423:4;8416:11;;;;;;;;;4200:4257;;;:::o;1358:209:1:-;1024:5;;;;;;;;;;;1010:19;;:10;:19;;;1002:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1428:12;1443:21;1454:9;1443:10;:21::i;:::-;1428:36;;1556:4;1543:10;:17;;;;1090:1;1358:209;:::o;2138:39:3:-;;;;:::o;303:20:1:-;;;;;;;;;;;;;:::o;436:40::-;;;;;;;;;;;;;;;;;:::o;621:25::-;;;;:::o;8763:7228:3:-;8830:12;8854:19;8876:10;:17;8854:39;;8972:9;;8960;;:21;8952:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9064:9;;9052;;:21;9035:14;:38;9031:728;;;9089:25;9147:9;;9135;;:21;9117:14;:40;9089:68;;9277:7;9287:1;9277:11;;9272:425;9295:20;9290:2;:25;9272:425;;;9662:1;9649:10;9643:17;9639:25;9627:10;9620:45;9317:4;;;;;;;9272:425;;;;9739:9;;9727;;:21;9710:38;;9031:728;;9769:9;9788:14;9812:17;9840;9867:18;9895:24;;:::i;:::-;9955:12;10046:14;10063:9;;10046:26;;10041:3166;10098:14;10086:9;;:26;10074:9;:38;10041:3166;;;10198:2;10161:10;10184:9;;10172;:21;10161:33;;;;;;;;;;;;;;:39;;10141:60;;10251:1;10239:9;;10227;:21;:25;10215:37;;10314:26;10330:9;10314:15;:26::i;:::-;10307:33;;10434:1;10426:4;:9;10422:121;;;10472:9;10455:8;10464:4;10455:14;;;;;;;;;:26;;;;;;;;;;;;;;;;;;10520:8;;10422:121;10648:10;10661:1;10648:14;;10643:2493;10673:4;10664:5;:13;10643:2493;;10727:1;10722;10710:9;:13;;;;;;:18;10706:2416;;;10802:8;10819:1;10811:5;:9;10802:19;;;;;;;;;;;;;;;;;;10790:31;;10856:9;10843:22;;11156:4;11150:11;11262:9;11255:5;11248:24;11342:10;11335:4;11328:5;11324:16;11317:36;11480:4;11472:6;11466:4;11459:5;11456:1;11452;11448:6;11437:48;11426:59;;11586:7;11599:1;11594:20;;;;11579:35;;11594:20;11603:9;11579:35;;11069:567;11802:2;11789:6;11796:1;11789:9;;;;;;;;;;;:15;;11769:36;;11925:1;11920;11908:9;:13;11907:19;;;;;;11895:31;;10706:2416;;;12050:9;12038:21;;12094:4;;;;;;;;;;;12081:17;;12271:4;12265:11;12377:9;12370:5;12363:24;12457:10;12450:4;12443:5;12439:16;12432:36;12595:4;12587:6;12581:4;12574:5;12571:1;12567;12563:6;12552:48;12541:59;;12701:7;12714:1;12709:20;;;;12694:35;;12709:20;12718:9;12694:35;;12184:567;12917:2;12904:6;12911:1;12904:9;;;;;;;;;;;:15;;12884:36;;13034:1;13022:9;:13;;;;;;13010:25;;10706:2416;10679:7;;;;;;;10643:2493;;;;13166:9;13149:8;13158:4;13149:14;;;;;;;;;:26;;;;;;;;;;;;;;;;;;10041:3166;10114:11;;;;;;;10041:3166;;;;13377:10;13397:1;13390:4;:8;13377:21;;13372:2287;13409:10;;13400:5;:19;13372:2287;;13466:1;13461;13449:9;:13;;;;;;:18;13445:2204;;;13533:8;13550:1;13542:5;:9;13533:19;;;;;;;;;;;;;;;;;;13521:31;;13583:9;13570:22;;13749:4;13743:11;13851:9;13844:5;13837:24;13927:10;13920:4;13913:5;13909:16;13902:36;14061:4;14053:6;14047:4;14040:5;14037:1;14033;14029:6;14018:48;14007:59;;14159:7;14172:1;14167:20;;;;14152:35;;14167:20;14176:9;14152:35;;13670:535;14363:2;14350:6;14357:1;14350:9;;;;;;;;;;;:15;;14330:36;;14482:1;14477;14465:9;:13;14464:19;;;;;;14452:31;;13445:2204;;;14636:9;14624:21;;14676:4;;;;;;;;;;;14663:17;;14837:4;14831:11;14939:9;14932:5;14925:24;15015:10;15008:4;15001:5;14997:16;14990:36;15149:4;15141:6;15135:4;15128:5;15125:1;15121;15117:6;15106:48;15095:59;;15247:7;15260:1;15255:20;;;;15240:35;;15255:20;15264:9;15240:35;;14758:535;15451:2;15438:6;15445:1;15438:9;;;;;;;;;;;:15;;15418:36;;15564:1;15552:9;:13;;;;;;15540:25;;13445:2204;13421:7;;;;;;;13372:2287;;;;15676:6;15683:1;15676:9;;;;;;;;;;;15669:16;;15701:38;15711:9;;15722:10;15734:4;15701:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15701:38:3;;;;;;;;;;;;;;;;;;;15840:14;15827:9;;:27;;;;;;;;;;;15957:4;15950:11;;;;;;;;;;8763:7228;;;:::o;3408:515::-;3471:9;3499:1;3492:8;;3532:1;3527;3515:9;:13;;;;;;:18;3510:407;;;3550:9;3562:1;3550:13;;3577:9;3589:1;3577:13;;3604:9;3624:1;3616:4;:9;;3604:21;;3639:268;3654:1;3646:4;:9;3639:268;;;3713:1;3705:4;3697;3693:1;3681:9;:13;:20;3680:29;;;;;;:34;3675:218;;;3746:4;3739:11;;3675:218;;;3804:4;3797:11;;3845:1;3837:4;:9;;3830:16;;3868:6;;;;;;;3675:218;3639:268;;;3510:407;;;;3408:515;;;:::o;246:1673:1:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;246:1673:1;;;;:::o",
  "source": "/**\nContract to manage permissions to update the leaves of the imported MerkleTree contract (which is the base contract which handles tree inserts and updates).\n\n@Author iAmMichaelConnor\n*/\npragma solidity ^0.5.8;\n\nimport \"./MerkleTreeSHA.sol\";\n\ncontract MerkleTreeControllerSHA is MerkleTreeSHA {\n\n    address public owner; // We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n\n    mapping(bytes32 => bytes32) public roots; // Example of a way to hold every root that's been calculated by this contract. This isn't actually used by this simple example-contract.\n\n    bytes32 public latestRoot; // Example of a way to hold the latest root so that users can retrieve it. This isn't actually used by this simple example-contract.\n\n    /**\n    We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n    @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not authorised to invoke this function\");\n        _;\n    }\n\n    /**\n    @notice Constructor for the MerkleTreeController contract.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    @notice Append a leaf to the tree\n    @param leafValue - the value of the leaf being inserted.\n    */\n    function _insertLeaf(bytes32 leafValue) external onlyOwner {\n\n        bytes32 root = insertLeaf(leafValue); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n\n    /**\n    @notice Append leaves to the tree\n    @param leafValues - the values of the leaves being inserted.\n    */\n    function _insertLeaves(bytes32[] calldata leafValues) external onlyOwner {\n\n        bytes32 root = insertLeaves(leafValues); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n}\n",
  "sourcePath": "/Users/miranda.Wooduk.ey.com/nightfallmimc/timber/deployer/contracts/MerkleTreeControllerSHA.sol",
  "ast": {
    "absolutePath": "/Users/miranda.Wooduk.ey.com/nightfallmimc/timber/deployer/contracts/MerkleTreeControllerSHA.sol",
    "exportedSymbols": {
      "MerkleTreeControllerSHA": [
        143
      ]
    },
    "id": 144,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 73,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:1"
      },
      {
        "absolutePath": "/Users/miranda.Wooduk.ey.com/nightfallmimc/timber/deployer/contracts/MerkleTreeSHA.sol",
        "file": "./MerkleTreeSHA.sol",
        "id": 74,
        "nodeType": "ImportDirective",
        "scope": 144,
        "sourceUnit": 1327,
        "src": "215:29:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 75,
              "name": "MerkleTreeSHA",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1326,
              "src": "282:13:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTreeSHA_$1326",
                "typeString": "contract MerkleTreeSHA"
              }
            },
            "id": 76,
            "nodeType": "InheritanceSpecifier",
            "src": "282:13:1"
          }
        ],
        "contractDependencies": [
          1326
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 143,
        "linearizedBaseContracts": [
          143,
          1326
        ],
        "name": "MerkleTreeControllerSHA",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 78,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "303:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 77,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "303:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 82,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "436:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 81,
              "keyType": {
                "id": 79,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "444:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "436:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 80,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "455:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 84,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "621:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 83,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "621:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "992:106:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 90,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 87,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1586,
                            "src": "1010:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 88,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1010:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 89,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "1024:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1010:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1031:48:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 86,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1589,
                        1590
                      ],
                      "referencedDeclaration": 1590,
                      "src": "1002:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1002:78:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "1002:78:1"
                },
                {
                  "id": 94,
                  "nodeType": "PlaceholderStatement",
                  "src": "1090:1:1"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 96,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 85,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "989:2:1"
            },
            "src": "971:127:1",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 104,
              "nodeType": "Block",
              "src": "1203:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 99,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78,
                      "src": "1213:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 100,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1586,
                        "src": "1221:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 101,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1221:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1213:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "1213:18:1"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.",
            "id": 105,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1193:2:1"
            },
            "returnParameters": {
              "id": 98,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1203:0:1"
            },
            "scope": 143,
            "src": "1182:56:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 122,
              "nodeType": "Block",
              "src": "1417:150:1",
              "statements": [
                {
                  "assignments": [
                    113
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 113,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 122,
                      "src": "1428:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 112,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1428:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 117,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 115,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "1454:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 114,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1013,
                      "src": "1443:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1443:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1428:36:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 118,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 84,
                      "src": "1543:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 119,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 113,
                      "src": "1556:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1543:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 121,
                  "nodeType": "ExpressionStatement",
                  "src": "1543:17:1"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 123,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 110,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 109,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 96,
                  "src": "1407:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1407:9:1"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 123,
                  "src": "1379:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 106,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1379:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1378:19:1"
            },
            "returnParameters": {
              "id": 111,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1417:0:1"
            },
            "scope": 143,
            "src": "1358:209:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 141,
              "nodeType": "Block",
              "src": "1764:153:1",
              "statements": [
                {
                  "assignments": [
                    132
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 132,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 141,
                      "src": "1775:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 131,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1775:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 136,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 134,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "1803:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 133,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1325,
                      "src": "1790:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 135,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1790:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1775:39:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 137,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 84,
                      "src": "1893:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 138,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 132,
                      "src": "1906:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1893:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "1893:17:1"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 142,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 129,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 128,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 96,
                  "src": "1754:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1754:9:1"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 126,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 142,
                  "src": "1714:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 124,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1714:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 125,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1714:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1713:31:1"
            },
            "returnParameters": {
              "id": 130,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1764:0:1"
            },
            "scope": 143,
            "src": "1691:226:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 144,
        "src": "246:1673:1"
      }
    ],
    "src": "190:1730:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/miranda.Wooduk.ey.com/nightfallmimc/timber/deployer/contracts/MerkleTreeControllerSHA.sol",
    "exportedSymbols": {
      "MerkleTreeControllerSHA": [
        143
      ]
    },
    "id": 144,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 73,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:1"
      },
      {
        "absolutePath": "/Users/miranda.Wooduk.ey.com/nightfallmimc/timber/deployer/contracts/MerkleTreeSHA.sol",
        "file": "./MerkleTreeSHA.sol",
        "id": 74,
        "nodeType": "ImportDirective",
        "scope": 144,
        "sourceUnit": 1327,
        "src": "215:29:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 75,
              "name": "MerkleTreeSHA",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1326,
              "src": "282:13:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTreeSHA_$1326",
                "typeString": "contract MerkleTreeSHA"
              }
            },
            "id": 76,
            "nodeType": "InheritanceSpecifier",
            "src": "282:13:1"
          }
        ],
        "contractDependencies": [
          1326
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 143,
        "linearizedBaseContracts": [
          143,
          1326
        ],
        "name": "MerkleTreeControllerSHA",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 78,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "303:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 77,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "303:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 82,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "436:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 81,
              "keyType": {
                "id": 79,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "444:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "436:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 80,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "455:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 84,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "621:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 83,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "621:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "992:106:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 90,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 87,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1586,
                            "src": "1010:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 88,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1010:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 89,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "1024:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1010:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1031:48:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 86,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1589,
                        1590
                      ],
                      "referencedDeclaration": 1590,
                      "src": "1002:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1002:78:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "1002:78:1"
                },
                {
                  "id": 94,
                  "nodeType": "PlaceholderStatement",
                  "src": "1090:1:1"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 96,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 85,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "989:2:1"
            },
            "src": "971:127:1",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 104,
              "nodeType": "Block",
              "src": "1203:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 99,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78,
                      "src": "1213:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 100,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1586,
                        "src": "1221:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 101,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1221:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1213:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "1213:18:1"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.",
            "id": 105,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1193:2:1"
            },
            "returnParameters": {
              "id": 98,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1203:0:1"
            },
            "scope": 143,
            "src": "1182:56:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 122,
              "nodeType": "Block",
              "src": "1417:150:1",
              "statements": [
                {
                  "assignments": [
                    113
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 113,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 122,
                      "src": "1428:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 112,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1428:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 117,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 115,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "1454:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 114,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1013,
                      "src": "1443:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1443:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1428:36:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 118,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 84,
                      "src": "1543:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 119,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 113,
                      "src": "1556:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1543:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 121,
                  "nodeType": "ExpressionStatement",
                  "src": "1543:17:1"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 123,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 110,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 109,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 96,
                  "src": "1407:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1407:9:1"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 123,
                  "src": "1379:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 106,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1379:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1378:19:1"
            },
            "returnParameters": {
              "id": 111,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1417:0:1"
            },
            "scope": 143,
            "src": "1358:209:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 141,
              "nodeType": "Block",
              "src": "1764:153:1",
              "statements": [
                {
                  "assignments": [
                    132
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 132,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 141,
                      "src": "1775:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 131,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1775:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 136,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 134,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "1803:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 133,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1325,
                      "src": "1790:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 135,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1790:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1775:39:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 137,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 84,
                      "src": "1893:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 138,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 132,
                      "src": "1906:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1893:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "1893:17:1"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 142,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 129,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 128,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 96,
                  "src": "1754:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1754:9:1"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 126,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 142,
                  "src": "1714:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 124,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1714:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 125,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1714:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1713:31:1"
            },
            "returnParameters": {
              "id": 130,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1764:0:1"
            },
            "scope": 143,
            "src": "1691:226:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 144,
        "src": "246:1673:1"
      }
    ],
    "src": "190:1730:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.19",
  "updatedAt": "2020-02-11T14:32:09.428Z",
  "devdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        }
      },
      "_insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        }
      },
      "insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        },
        "return": "bytes32 - the root of the merkle tree, after the insert."
      },
      "insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        },
        "return": "bytes32[] - the root of the merkle tree, after all the inserts."
      }
    }
  },
  "userdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "notice": "Append a leaf to the tree"
      },
      "_insertLeaves(bytes32[])": {
        "notice": "Append leaves to the tree"
      },
      "constructor": "Constructor for the MerkleTreeController contract.",
      "insertLeaf(bytes32)": {
        "notice": "Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier."
      },
      "insertLeaves(bytes32[])": {
        "notice": "Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier."
      }
    }
  }
}